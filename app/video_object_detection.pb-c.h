/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: video-object-detection 1.proto */

#ifndef PROTOBUF_C_video_2dobject_2ddetection_201_2eproto__INCLUDED
#define PROTOBUF_C_video_2dobject_2ddetection_201_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct VOD__Attribute VOD__Attribute;
typedef struct VOD__Classification VOD__Classification;
typedef struct VOD__Detection VOD__Detection;
typedef struct VOD__Event VOD__Event;
typedef struct VOD__Scene VOD__Scene;
typedef struct VOD__Calibration VOD__Calibration;
typedef struct VOD__ObjectClass VOD__ObjectClass;
typedef struct VOD__AttributeClass VOD__AttributeClass;
typedef struct VOD__AttributeType VOD__AttributeType;
typedef struct VOD__DetectorInformation VOD__DetectorInformation;


/* --- enums --- */

typedef enum _VOD__Detection__DetectionStatus {
  VOD__DETECTION__DETECTION_STATUS__UNTRACKED = 0,
  VOD__DETECTION__DETECTION_STATUS__TRACKED_UNCONFIDENT = 1,
  VOD__DETECTION__DETECTION_STATUS__TRACKED_CONFIDENT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOD__DETECTION__DETECTION_STATUS)
} VOD__Detection__DetectionStatus;
/*
 **
 * Event action used by an event.
 */
typedef enum _VOD__EventAction {
  VOD__EVENT_ACTION__EVENT_DELETE = 0,
  VOD__EVENT_ACTION__EVENT_CONNECT = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOD__EVENT_ACTION)
} VOD__EventAction;

/* --- messages --- */

typedef enum {
  VOD__ATTRIBUTE__HAS_CLASS__NOT_SET = 0,
  VOD__ATTRIBUTE__HAS_CLASS_ATTR_CLASS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOD__ATTRIBUTE__HAS_CLASS__CASE)
} VOD__Attribute__HasClassCase;

typedef enum {
  VOD__ATTRIBUTE__HAS_SCORE__NOT_SET = 0,
  VOD__ATTRIBUTE__HAS_SCORE_SCORE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOD__ATTRIBUTE__HAS_SCORE__CASE)
} VOD__Attribute__HasScoreCase;

struct  VOD__Attribute
{
  ProtobufCMessage base;
  /*
   * AttributeType id 
   */
  uint32_t type;
  VOD__Attribute__HasClassCase has_class_case;
  union {
    uint32_t attr_class;
  };
  VOD__Attribute__HasScoreCase has_score_case;
  union {
    uint32_t score;
  };
};
#define VOD__ATTRIBUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__attribute__descriptor) \
    , 0, VOD__ATTRIBUTE__HAS_CLASS__NOT_SET, {0}, VOD__ATTRIBUTE__HAS_SCORE__NOT_SET, {0} }


typedef enum {
  VOD__CLASSIFICATION__HAS_CLASS__NOT_SET = 0,
  VOD__CLASSIFICATION__HAS_CLASS_DET_CLASS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOD__CLASSIFICATION__HAS_CLASS__CASE)
} VOD__Classification__HasClassCase;

typedef enum {
  VOD__CLASSIFICATION__HAS_SCORE__NOT_SET = 0,
  VOD__CLASSIFICATION__HAS_SCORE_SCORE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VOD__CLASSIFICATION__HAS_SCORE__CASE)
} VOD__Classification__HasScoreCase;

struct  VOD__Classification
{
  ProtobufCMessage base;
  VOD__Classification__HasClassCase has_class_case;
  union {
    uint32_t det_class;
  };
  VOD__Classification__HasScoreCase has_score_case;
  union {
    uint32_t score;
  };
};
#define VOD__CLASSIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__classification__descriptor) \
    , VOD__CLASSIFICATION__HAS_CLASS__NOT_SET, {0}, VOD__CLASSIFICATION__HAS_SCORE__NOT_SET, {0} }


struct  VOD__Detection
{
  ProtobufCMessage base;
  float left;
  float top;
  float right;
  float bottom;
  /*
   * Tracking id 
   */
  uint32_t id;
  /*
   * ObjectClass id 
   */
  uint32_t det_class;
  uint32_t score;
  VOD__Detection__DetectionStatus detection_status;
  size_t n_attributes;
  VOD__Attribute **attributes;
  size_t n_classifications;
  VOD__Classification **classifications;
};
#define VOD__DETECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__detection__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, VOD__DETECTION__DETECTION_STATUS__UNTRACKED, 0,NULL, 0,NULL }


/*
 * Event is an object that holds information about an event. The type
 * of event is specified with an action and refers to one or multiple
 * object ids.
 * For example a delete event only has one id, so the object_id refers
 * to the object that has been deleted (and object_ids is empty).
 * For a connect event the object_ids are the source id and the object_id
 * is the target id, i.e. multiple ids are connected into one id.
 */
struct  VOD__Event
{
  ProtobufCMessage base;
  /*
   * Event identifier 
   */
  VOD__EventAction action;
  /*
   * Object id that this event refers to 
   */
  int32_t object_id;
  /*
   * Multiple object ids if needed 
   */
  size_t n_object_ids;
  int32_t *object_ids;
};
#define VOD__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__event__descriptor) \
    , VOD__EVENT_ACTION__EVENT_DELETE, 0, 0,NULL }


struct  VOD__Scene
{
  ProtobufCMessage base;
  uint64_t timestamp;
  size_t n_detections;
  VOD__Detection **detections;
  /*
   * Events 
   */
  size_t n_events;
  VOD__Event **events;
};
#define VOD__SCENE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__scene__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  VOD__Calibration
{
  ProtobufCMessage base;
  float precision;
  float recall;
  float threshold;
};
#define VOD__CALIBRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__calibration__descriptor) \
    , 0, 0, 0 }


struct  VOD__ObjectClass
{
  ProtobufCMessage base;
  uint32_t id;
  char *name;
  size_t n_calibrations;
  VOD__Calibration **calibrations;
  size_t n_attribute_type_ids;
  uint32_t *attribute_type_ids;
};
#define VOD__OBJECT_CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__object_class__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  VOD__AttributeClass
{
  ProtobufCMessage base;
  uint32_t id;
  char *name;
  size_t n_calibrations;
  VOD__Calibration **calibrations;
};
#define VOD__ATTRIBUTE_CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__attribute_class__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  VOD__AttributeType
{
  ProtobufCMessage base;
  uint32_t id;
  char *name;
  size_t n_classes;
  VOD__AttributeClass **classes;
};
#define VOD__ATTRIBUTE_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__attribute_type__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  VOD__DetectorInformation
{
  ProtobufCMessage base;
  size_t n_classes;
  VOD__ObjectClass **classes;
  size_t n_attribute_types;
  VOD__AttributeType **attribute_types;
};
#define VOD__DETECTOR_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vod__detector_information__descriptor) \
    , 0,NULL, 0,NULL }


/* VOD__Attribute methods */
void   vod__attribute__init
                     (VOD__Attribute         *message);
size_t vod__attribute__get_packed_size
                     (const VOD__Attribute   *message);
size_t vod__attribute__pack
                     (const VOD__Attribute   *message,
                      uint8_t             *out);
size_t vod__attribute__pack_to_buffer
                     (const VOD__Attribute   *message,
                      ProtobufCBuffer     *buffer);
VOD__Attribute *
       vod__attribute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__attribute__free_unpacked
                     (VOD__Attribute *message,
                      ProtobufCAllocator *allocator);
/* VOD__Classification methods */
void   vod__classification__init
                     (VOD__Classification         *message);
size_t vod__classification__get_packed_size
                     (const VOD__Classification   *message);
size_t vod__classification__pack
                     (const VOD__Classification   *message,
                      uint8_t             *out);
size_t vod__classification__pack_to_buffer
                     (const VOD__Classification   *message,
                      ProtobufCBuffer     *buffer);
VOD__Classification *
       vod__classification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__classification__free_unpacked
                     (VOD__Classification *message,
                      ProtobufCAllocator *allocator);
/* VOD__Detection methods */
void   vod__detection__init
                     (VOD__Detection         *message);
size_t vod__detection__get_packed_size
                     (const VOD__Detection   *message);
size_t vod__detection__pack
                     (const VOD__Detection   *message,
                      uint8_t             *out);
size_t vod__detection__pack_to_buffer
                     (const VOD__Detection   *message,
                      ProtobufCBuffer     *buffer);
VOD__Detection *
       vod__detection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__detection__free_unpacked
                     (VOD__Detection *message,
                      ProtobufCAllocator *allocator);
/* VOD__Event methods */
void   vod__event__init
                     (VOD__Event         *message);
size_t vod__event__get_packed_size
                     (const VOD__Event   *message);
size_t vod__event__pack
                     (const VOD__Event   *message,
                      uint8_t             *out);
size_t vod__event__pack_to_buffer
                     (const VOD__Event   *message,
                      ProtobufCBuffer     *buffer);
VOD__Event *
       vod__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__event__free_unpacked
                     (VOD__Event *message,
                      ProtobufCAllocator *allocator);
/* VOD__Scene methods */
void   vod__scene__init
                     (VOD__Scene         *message);
size_t vod__scene__get_packed_size
                     (const VOD__Scene   *message);
size_t vod__scene__pack
                     (const VOD__Scene   *message,
                      uint8_t             *out);
size_t vod__scene__pack_to_buffer
                     (const VOD__Scene   *message,
                      ProtobufCBuffer     *buffer);
VOD__Scene *
       vod__scene__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__scene__free_unpacked
                     (VOD__Scene *message,
                      ProtobufCAllocator *allocator);
/* VOD__Calibration methods */
void   vod__calibration__init
                     (VOD__Calibration         *message);
size_t vod__calibration__get_packed_size
                     (const VOD__Calibration   *message);
size_t vod__calibration__pack
                     (const VOD__Calibration   *message,
                      uint8_t             *out);
size_t vod__calibration__pack_to_buffer
                     (const VOD__Calibration   *message,
                      ProtobufCBuffer     *buffer);
VOD__Calibration *
       vod__calibration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__calibration__free_unpacked
                     (VOD__Calibration *message,
                      ProtobufCAllocator *allocator);
/* VOD__ObjectClass methods */
void   vod__object_class__init
                     (VOD__ObjectClass         *message);
size_t vod__object_class__get_packed_size
                     (const VOD__ObjectClass   *message);
size_t vod__object_class__pack
                     (const VOD__ObjectClass   *message,
                      uint8_t             *out);
size_t vod__object_class__pack_to_buffer
                     (const VOD__ObjectClass   *message,
                      ProtobufCBuffer     *buffer);
VOD__ObjectClass *
       vod__object_class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__object_class__free_unpacked
                     (VOD__ObjectClass *message,
                      ProtobufCAllocator *allocator);
/* VOD__AttributeClass methods */
void   vod__attribute_class__init
                     (VOD__AttributeClass         *message);
size_t vod__attribute_class__get_packed_size
                     (const VOD__AttributeClass   *message);
size_t vod__attribute_class__pack
                     (const VOD__AttributeClass   *message,
                      uint8_t             *out);
size_t vod__attribute_class__pack_to_buffer
                     (const VOD__AttributeClass   *message,
                      ProtobufCBuffer     *buffer);
VOD__AttributeClass *
       vod__attribute_class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__attribute_class__free_unpacked
                     (VOD__AttributeClass *message,
                      ProtobufCAllocator *allocator);
/* VOD__AttributeType methods */
void   vod__attribute_type__init
                     (VOD__AttributeType         *message);
size_t vod__attribute_type__get_packed_size
                     (const VOD__AttributeType   *message);
size_t vod__attribute_type__pack
                     (const VOD__AttributeType   *message,
                      uint8_t             *out);
size_t vod__attribute_type__pack_to_buffer
                     (const VOD__AttributeType   *message,
                      ProtobufCBuffer     *buffer);
VOD__AttributeType *
       vod__attribute_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__attribute_type__free_unpacked
                     (VOD__AttributeType *message,
                      ProtobufCAllocator *allocator);
/* VOD__DetectorInformation methods */
void   vod__detector_information__init
                     (VOD__DetectorInformation         *message);
size_t vod__detector_information__get_packed_size
                     (const VOD__DetectorInformation   *message);
size_t vod__detector_information__pack
                     (const VOD__DetectorInformation   *message,
                      uint8_t             *out);
size_t vod__detector_information__pack_to_buffer
                     (const VOD__DetectorInformation   *message,
                      ProtobufCBuffer     *buffer);
VOD__DetectorInformation *
       vod__detector_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vod__detector_information__free_unpacked
                     (VOD__DetectorInformation *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*VOD__Attribute_Closure)
                 (const VOD__Attribute *message,
                  void *closure_data);
typedef void (*VOD__Classification_Closure)
                 (const VOD__Classification *message,
                  void *closure_data);
typedef void (*VOD__Detection_Closure)
                 (const VOD__Detection *message,
                  void *closure_data);
typedef void (*VOD__Event_Closure)
                 (const VOD__Event *message,
                  void *closure_data);
typedef void (*VOD__Scene_Closure)
                 (const VOD__Scene *message,
                  void *closure_data);
typedef void (*VOD__Calibration_Closure)
                 (const VOD__Calibration *message,
                  void *closure_data);
typedef void (*VOD__ObjectClass_Closure)
                 (const VOD__ObjectClass *message,
                  void *closure_data);
typedef void (*VOD__AttributeClass_Closure)
                 (const VOD__AttributeClass *message,
                  void *closure_data);
typedef void (*VOD__AttributeType_Closure)
                 (const VOD__AttributeType *message,
                  void *closure_data);
typedef void (*VOD__DetectorInformation_Closure)
                 (const VOD__DetectorInformation *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    vod__event_action__descriptor;
extern const ProtobufCMessageDescriptor vod__attribute__descriptor;
extern const ProtobufCMessageDescriptor vod__classification__descriptor;
extern const ProtobufCMessageDescriptor vod__detection__descriptor;
extern const ProtobufCEnumDescriptor    vod__detection__detection_status__descriptor;
extern const ProtobufCMessageDescriptor vod__event__descriptor;
extern const ProtobufCMessageDescriptor vod__scene__descriptor;
extern const ProtobufCMessageDescriptor vod__calibration__descriptor;
extern const ProtobufCMessageDescriptor vod__object_class__descriptor;
extern const ProtobufCMessageDescriptor vod__attribute_class__descriptor;
extern const ProtobufCMessageDescriptor vod__attribute_type__descriptor;
extern const ProtobufCMessageDescriptor vod__detector_information__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_video_2dobject_2ddetection_201_2eproto__INCLUDED */
